
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.text.DecimalFormat;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author yangy
 */
public class TiledRouting extends javax.swing.JFrame {

    /**
     * Creates new form TiledRouting
     */
    //instantiate a timer to run pathfinder algorithm automatically in the program
    int run_num = 0;
    Timer timer = new Timer(400, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent evt) {
            //...Perform a task...
            if (run_num < Integer.parseInt(num_field.getText())) {
                run_num++;
                System.out.println("===============================");
                showInfo.setText("");
                tile_graph.runIteration();
                showNode();
                if (showCong()) {
                    run_num = Integer.parseInt(num_field.getText());
                }
                showPanel.removeAll();
                showPanel.revalidate();
                showPanel.repaint();
            } else {
                Timer tim = (Timer) evt.getSource();
                tim.stop();
                run_num = 0;
            }
        }
    });
    //constructor of tiled routing class   

    public TiledRouting(int num1, int num2, int num3, int num4) {
        tile_graph = new TiledGraph(num1, num2, num3, num4);
        sources_a = new JLabel[tile_graph.getGraphSize()][tile_graph.getGraphSize()];
        sinks_a = new JLabel[tile_graph.getGraphSize()][tile_graph.getGraphSize()];
        wires_a = new JLabel[2 * tile_graph.getGraphSize() * tile_graph.getGraphSize()][2 * tile_graph.getWireSize()];
        tile_graph.initialize();
        iter = 0;
        initComponents();
        showPanel = new DrawTile(tile_graph, showInfo);
        showPane.setViewportView(showPanel);
        System.out.println("5");
        tile_graph.find_shortest_path_list();
        showCong();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialog = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        showInfo = new javax.swing.JTextArea();
        showState = new javax.swing.JLabel();
        showPane = new javax.swing.JScrollPane(showPanel);
        route = new javax.swing.JButton();
        reroute = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        show = new javax.swing.JButton();
        add = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        showSrc = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        showDest = new javax.swing.JTextArea();
        num_field = new javax.swing.JTextField();
        stopr = new javax.swing.JButton();
        zoom = new javax.swing.JToggleButton();
        zoom_in = new javax.swing.JButton();
        zoom_out = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        info = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();

        dialog.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("User Manual");

        jLabel3.setFont(new java.awt.Font("Euphemia", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("A visulization of the PathFinder FPGA routing Algorithm");

        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextPane1.setText("The applet is designed for presenting how PathFinder FPGA routing algorithm works in a simplified FPGA architecture.  The program works for any size tiled graph with any number of source nodes, sink nodes, and wire nodes to represent FPGA architecture. It can run PathFinder algorithm to find path between specific source-dest pair and solve illegal connections with negotiated congestion router.The results of each iteration will show on the panel with extra information of congested nodes.\n\nAfter input the parameters of FPGA architecture, the main window with generated architecture shows up.\nThe program makes following assumptions:\nThe length of wire segment is the same. \nThe delay is the same as base cost for each node. \n\n\nThe program utilize Dijkstra’s algorithm to calculate the shortest path for each source-destination pair, and negotiated congestion router to update node cost and eliminate illegal connection. \n\nHow to use the program:\nThe source nodes are painted with green color.\nThe sink nodes are painted with red color.\nThe wire nodes are painted with blue color. The color of wire nodes will change due to the change of cost, which means the cost goes higher, the color goes lighter. When the cost of a node becomes too high, the node will keep yellow. \n\nFirstly, press \"input\" button to select a configuration file to test. \nSecondly, input a number in the text filed next to \"start\" button, and press the button to run algorithm for the input number of iterations. If the problem was solved within the limited iterations, it will stop running automatically, and show how many iterations the pathfinder algorithm used to solve congestion. Otherwise, it will show the number of congestion nodes on the panel, and we can input another number and press “start” again until it finds a final solution.\nIf the congestion is solved or the problem is discarded, press “restart” button, and reload a configuration file to start again. \n\nOther Features:\nTo check details of a specific tile on the panel, double right click the tile and see the index of nodes and color change of wire nodes.\nPress the source nodes, and the paths between source-destination show up. \nPress the wire nodes, and the congestion history and current cost show up. \nTo zoom the whole FPGA architecture, press “zoom in” or “zoom out” button to realize it. However, the program can be zoom only by 2x or 0.5x from the original size. \n\nFuture Improvements of the program:\nAdd delay calculation in the program\nInclude more switch patterns in generating FPGA board\n");
        jScrollPane4.setViewportView(jTextPane1);

        javax.swing.GroupLayout dialogLayout = new javax.swing.GroupLayout(dialog.getContentPane());
        dialog.getContentPane().setLayout(dialogLayout);
        dialogLayout.setHorizontalGroup(
            dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogLayout.createSequentialGroup()
                .addGroup(dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialogLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialogLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        dialogLayout.setVerticalGroup(
            dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        showInfo.setBackground(new java.awt.Color(204, 204, 204));
        showInfo.setColumns(20);
        showInfo.setRows(5);
        jScrollPane2.setViewportView(showInfo);

        showPane.setRequestFocusEnabled(false);

        route.setText("start");
        route.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                routeActionPerformed(evt);
            }
        });

        reroute.setText("restart");
        reroute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rerouteActionPerformed(evt);
            }
        });

        jLabel1.setText("Input net");

        show.setText("SHOW");
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });

        add.setText("INPUT");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        showSrc.setColumns(20);
        showSrc.setLineWrap(true);
        showSrc.setRows(5);
        showSrc.setWrapStyleWord(true);
        jScrollPane3.setViewportView(showSrc);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        showDest.setColumns(20);
        showDest.setRows(5);
        jScrollPane1.setViewportView(showDest);

        stopr.setText("stop");
        stopr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stoprActionPerformed(evt);
            }
        });

        zoom.setText("zoom");
        zoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomActionPerformed(evt);
            }
        });

        zoom_in.setText("zoom in");
        zoom_in.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoom_inActionPerformed(evt);
            }
        });

        zoom_out.setText("zoom out");
        zoom_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoom_outActionPerformed(evt);
            }
        });

        menu.setText("Menu");

        info.setText("Info");
        info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoActionPerformed(evt);
            }
        });
        menu.add(info);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        menu.add(exit);

        jMenuBar1.add(menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zoom_in, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(zoom_out, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(zoom))
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(showState, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(route, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                    .addComponent(stopr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reroute)
                                    .addComponent(num_field, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(show, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(showPane, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(showState, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(route)
                    .addComponent(num_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reroute)
                    .addComponent(stopr))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoom)
                        .addGap(18, 18, 18)
                        .addComponent(zoom_in)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoom_out)
                        .addGap(69, 69, 69)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(18, 18, 18)
                .addComponent(add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(show)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(showPane, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //if "start" button is pressed 
    private void routeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routeActionPerformed
        if (restart) {
            tile_graph.find_shortest_path_list();
            showPanel.setScale(1);
            restart = false;
        }
        timer.start();
    }//GEN-LAST:event_routeActionPerformed

    private void rerouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rerouteActionPerformed
        showInfo.setText("");
        showSrc.setText("");
        showDest.setText("");
        iter = 0;
        tile_graph.initialize();
        restart = true;
        showNode();
        showCong();
        showPanel.removeAll();
        showPanel.revalidate();
        showPanel.repaint();
    }//GEN-LAST:event_rerouteActionPerformed

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        tile_graph.find_shortest_path_list();
        showCong();
        showNode();
        showPanel.removeAll();
        showPanel.revalidate();
        showPanel.repaint();
    }//GEN-LAST:event_showActionPerformed

    //read source-destination pairs from input file and show in the text area
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        showSrc.setText("");
        showDest.setText("");
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(filename));
            String line;
            while ((line = reader.readLine()) != null) {
                String[] temp = line.split(",");
                for (int i = 1; i < temp.length; i++) {
                    showSrc.append(temp[0] + "\n");
                    showDest.append(temp[i] + "\n");
                    tile_graph.addNet(Integer.parseInt(temp[0]), Integer.parseInt(temp[i]));
                }
            }
            reader.close();
        } catch (Exception e) {
            System.err.format("Exception occurred trying to read '%s'.", filename);
            e.printStackTrace();
        }
    }//GEN-LAST:event_addActionPerformed
//leave the program by selecting exit choice
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed
//stop automatic run of program
    private void stoprActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stoprActionPerformed
        timer.stop();
    }//GEN-LAST:event_stoprActionPerformed

    private void zoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomActionPerformed
        if (zoom.isSelected()) {
            showPanel.setZoomView();
        } else {
            showPanel.setScale(1);
            showPanel.setZoomView();
        }
    }//GEN-LAST:event_zoomActionPerformed

    private void zoom_outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoom_outActionPerformed
        showPanel.setZoomView();
        showPanel.setScale(0.5);
    }//GEN-LAST:event_zoom_outActionPerformed

    private void zoom_inActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoom_inActionPerformed
        showPanel.setZoomView();
        showPanel.setScale(2);
    }//GEN-LAST:event_zoom_inActionPerformed
//check user manual by selecting "info" choice
    private void infoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoActionPerformed
        pack();
        dialog.setSize(new Dimension(600, 600));
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }//GEN-LAST:event_infoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TiledRouting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TiledRouting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TiledRouting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TiledRouting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TiledRouting(8, 2, 1, 1).setVisible(true);
            }
        });
    }
//test whether there is still duplicate usage of wire nodes and show state on the panel  

    public boolean showCong() {
        if (!tile_graph.testCong()) {
            iter++;
            showState.setText("STILL CONGESTED");
            return false;
        } else {
            showState.setText("This circuit has no congestion");
            showInfo.append("iteration number: " + iter);
            iter = 0;
            return true;
        }
    }
//when running the algorithm automatically, show the lists of congestion wire nodes after each iteration on the panel    

    public void showNode() {
        showInfo.setText("");
        for (int i = 0; i < tile_graph.getGraphSize(); i++) {
            for (int j = 0; j < tile_graph.getGraphSize(); j++) {
                Tile<Integer> temp = tile_graph.getGraph()[i][j];
                for (int k = 0; k < temp.getWires().size(); k++) {
                    if (temp.getWires().get(k).getOther() > 2) {
                        DecimalFormat numformat = new DecimalFormat("#.00");
                        showInfo.append("show node: " + temp.getWires().get(k).getKey() + "\n" + "show cost: " + numformat.format(temp.getWires().get(k).getCost()) + "\n" + "congestion" + temp.getWires().get(k).getOther() + "\n");
                    }
                }
            }
        }
    }

    TiledGraph tile_graph;
    private JLabel sources_a[][];
    private JLabel sinks_a[][];
    private JLabel wires_a[][];
    private int iter;
    private boolean restart = false;
    private DrawTile showPanel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JDialog dialog;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenuItem info;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JMenu menu;
    private javax.swing.JTextField num_field;
    private javax.swing.JButton reroute;
    private javax.swing.JButton route;
    private javax.swing.JButton show;
    private javax.swing.JTextArea showDest;
    private javax.swing.JTextArea showInfo;
    private javax.swing.JScrollPane showPane;
    private javax.swing.JTextArea showSrc;
    private javax.swing.JLabel showState;
    private javax.swing.JButton stopr;
    private javax.swing.JToggleButton zoom;
    private javax.swing.JButton zoom_in;
    private javax.swing.JButton zoom_out;
    // End of variables declaration//GEN-END:variables
}
