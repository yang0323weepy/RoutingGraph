
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.text.DecimalFormat;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author yangy
 */
public class TiledRouting extends javax.swing.JFrame {

    /**
     * Creates new form TiledRouting
     */
    int run_num = 0;
    Timer timer = new Timer(400, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent evt) {
            //...Perform a task...
            if(run_num < Integer.parseInt(num_field.getText())) {
                run_num++;
                System.out.println("===============================");
                showInfo.setText("");
                tile_graph.runIteration();
                showNode();
                if(showCong()) run_num = Integer.parseInt(num_field.getText());
                showPanel.removeAll();
                showPanel.revalidate();
                showPanel.repaint();
            }
            else{
                Timer tim = (Timer) evt.getSource();
                tim.stop();
                run_num = 0;
            }
        }
    });
    
    public TiledRouting() {      
        tile_graph = new TiledGraph(16,2,1,1);
        sources_a = new JLabel[tile_graph.getGraphSize()][tile_graph.getGraphSize()];
        sinks_a = new JLabel[tile_graph.getGraphSize()][tile_graph.getGraphSize()];
        wires_a = new JLabel[2 * tile_graph.getGraphSize() * tile_graph.getGraphSize()][2*tile_graph.getWireSize()];                
        tile_graph.initialize();
        iter = 0;
//        setUp_b();
        initComponents();
        showPanel = new DrawTile(tile_graph,showInfo,sources_a,sinks_a,wires_a);
        showPane.setViewportView(showPanel);
        tile_graph.find_shortest_path_list();
        showCong();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialog = new javax.swing.JDialog();
        manualPane = new javax.swing.JScrollPane();
        manual = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        showInfo = new javax.swing.JTextArea();
        showState = new javax.swing.JLabel();
        showPane = new javax.swing.JScrollPane(showPanel);
        route = new javax.swing.JButton();
        reroute = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        show = new javax.swing.JButton();
        add = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        showSrc = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        showDest = new javax.swing.JTextArea();
        num_field = new javax.swing.JTextField();
        stopr = new javax.swing.JButton();
        zoom = new javax.swing.JToggleButton();
        zoom_in = new javax.swing.JButton();
        zoom_out = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        info = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();

        dialog.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));

        manualPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        manual.setEditable(false);
        manual.setColumns(20);
        manual.setLineWrap(true);
        manual.setRows(5);
        manual.setText("The applet is designed for presenting how PathFinder FPGA routing algorithm works in a simplfied FPGA architecture. ");
        manual.setWrapStyleWord(true);
        manualPane.setViewportView(manual);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("User Manual");

        jLabel3.setFont(new java.awt.Font("Euphemia", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("A visulization of the PathFinder FPGA routing Algorithm");

        javax.swing.GroupLayout dialogLayout = new javax.swing.GroupLayout(dialog.getContentPane());
        dialog.getContentPane().setLayout(dialogLayout);
        dialogLayout.setHorizontalGroup(
            dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(manualPane, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
            .addGroup(dialogLayout.createSequentialGroup()
                .addGroup(dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialogLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        dialogLayout.setVerticalGroup(
            dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manualPane, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        showInfo.setBackground(new java.awt.Color(204, 204, 204));
        showInfo.setColumns(20);
        showInfo.setRows(5);
        jScrollPane2.setViewportView(showInfo);

        showPane.setRequestFocusEnabled(false);

        route.setText("start");
        route.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                routeActionPerformed(evt);
            }
        });

        reroute.setText("restart");
        reroute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rerouteActionPerformed(evt);
            }
        });

        jLabel1.setText("Input net");

        show.setText("SHOW");
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });

        add.setText("INPUT");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        showSrc.setColumns(20);
        showSrc.setRows(5);
        showSrc.setPreferredSize(new java.awt.Dimension(98, 94));
        jScrollPane3.setViewportView(showSrc);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        showDest.setColumns(20);
        showDest.setRows(5);
        jScrollPane1.setViewportView(showDest);

        stopr.setText("stop");
        stopr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stoprActionPerformed(evt);
            }
        });

        zoom.setText("zoom");
        zoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomActionPerformed(evt);
            }
        });

        zoom_in.setText("zoom in");
        zoom_in.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoom_inActionPerformed(evt);
            }
        });

        zoom_out.setText("zoom out");
        zoom_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoom_outActionPerformed(evt);
            }
        });

        menu.setText("Menu");

        info.setText("Info");
        info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoActionPerformed(evt);
            }
        });
        menu.add(info);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        menu.add(exit);

        jMenuBar1.add(menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zoom_in, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(zoom_out, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(zoom))
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(showState, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(route, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                    .addComponent(stopr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reroute)
                                    .addComponent(num_field, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(show, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(showPane, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(showState, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(route)
                    .addComponent(num_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reroute)
                    .addComponent(stopr))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoom)
                        .addGap(18, 18, 18)
                        .addComponent(zoom_in)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoom_out)
                        .addGap(69, 69, 69)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(18, 18, 18)
                .addComponent(add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(show)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(showPane, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void routeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routeActionPerformed
        if(restart)    {
//            setUp_b();
            tile_graph.find_shortest_path_list();
            showPanel.setScale(1);
            restart = false;
        }  
        timer.start();
    }//GEN-LAST:event_routeActionPerformed

    private void rerouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rerouteActionPerformed
        // TODO add your handling code here:
        showInfo.setText("");
        showSrc.setText("");
        showDest.setText("");
        iter = 0;
        tile_graph.initialize();
        restart = true;
        showNode();
        showCong();
        showPanel.removeAll();
        showPanel.revalidate();
        showPanel.repaint();
    }//GEN-LAST:event_rerouteActionPerformed

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        // TODO add your handling code here:
        tile_graph.find_shortest_path_list();
        showCong();
        showNode();
        showPanel.removeAll();
        showPanel.revalidate();
        showPanel.repaint();
    }//GEN-LAST:event_showActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        showSrc.setText("");
        showDest.setText("");
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(filename));
            String line;
            while ((line = reader.readLine()) != null) {
              String[] temp = line.split(",");
            for(int i = 1; i <temp.length;i++){
                showSrc.append(temp[0]+"\n");
                showDest.append(temp[i]+"\n");
                tile_graph.addNet(Integer.parseInt(temp[0]),Integer.parseInt(temp[i]));
              }
            }
            reader.close();
        } catch (Exception e) {
            System.err.format("Exception occurred trying to read '%s'.", filename);
            e.printStackTrace();
        }
    }//GEN-LAST:event_addActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void stoprActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stoprActionPerformed
        // TODO add your handling code here:
        timer.stop();
    }//GEN-LAST:event_stoprActionPerformed

    private void zoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomActionPerformed
        // TODO add your handling code here:
        if(zoom.isSelected()){
           showPanel.setZoomView();
        }
        else{
            showPanel.setScale(1);
            showPanel.setZoomView();
        }
    }//GEN-LAST:event_zoomActionPerformed

    private void zoom_outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoom_outActionPerformed
        // TODO add your handling code here:
        showPanel.setZoomView();
        showPanel.setScale(0.5);
    }//GEN-LAST:event_zoom_outActionPerformed

    private void zoom_inActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoom_inActionPerformed
        // TODO add your handling code here:
        showPanel.setZoomView();
        showPanel.setScale(2);
        
    }//GEN-LAST:event_zoom_inActionPerformed

    private void infoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoActionPerformed
        // TODO add your handling code here:
        pack();
        dialog.setSize(new Dimension(600,600));
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }//GEN-LAST:event_infoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TiledRouting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TiledRouting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TiledRouting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TiledRouting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TiledRouting().setVisible(true);
            }
        });
    }
 
 public void setUp() {
        for (int i = 0; i < tile_graph.getGraphSize(); i++) {
            for (int j = 0; j < tile_graph.getGraphSize(); j++) {       
                Tile<Integer> tile = tile_graph.getGraph()[i][j];
                int x_pos = 2 + i * drawBorder / tile_graph.getGraphSize();
                int y_pos = 2 + j * drawBorder / tile_graph.getGraphSize();
                sources_a[i][j] = new JLabel("", CENTER);
                sources_a[i][j].setText(Integer.toString(tile.getSources().get(0).getKey()));
                sources_a[i][j].setBackground(Color.green);
                sources_a[i][j].setOpaque(true);
                sources_a[i][j].setLocation(x_pos + drawBorder / tile_graph.getGraphSize() / 2 - drawBorder / tile_graph.getGraphSize()/8, y_pos + 1);
                tile.getSources().get(0).pos_x_e = x_pos + drawBorder / tile_graph.getGraphSize() / 2;
                tile.getSources().get(0).pos_y_e = y_pos + 1;
                sources_a[i][j].setSize(drawBorder / tile_graph.getGraphSize() /8, drawBorder / tile_graph.getGraphSize()/8);
                sources_a[i][j].addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        JLabel l = (JLabel) e.getSource();
                        showInfo.setText("");
                        String state = "";
                        int num = Integer.parseInt(l.getText());
                        state = "source";
                        String path = "path from";
                        String cost = "cost ";
                        int key = 0;
                        for (int i = 0; i < tile_graph.getSourceList().size(); i++) {
                            if (tile_graph.getSourceList().get(i).getKey() == num) {
                                key = i;
                            }
                        }
                        for (int i = 0; i < tile_graph.getSourceList().get(key).paths.size(); i++) {
                            path = "path from";
                            cost = "cost";
                            for (int m = 0; m < tile_graph.getSourceList().get(key).paths.get(i).size(); m++) {
                                path = path + " " + tile_graph.getSourceList().get(key).paths.get(i).get(m).getKey();
                            }
                            DecimalFormat numformat = new DecimalFormat("#.00");
                            cost = cost + numformat.format(tile_graph.getSourceList().get(key).distance.get(i));
                            showInfo.append(state + "\n" + path + "\n" + cost + "!" + "\n");
                        }

                        for (int i = 0; i < tile_graph.getGraphSize(); i++) {
                            for (int j = 0; j < tile_graph.getGraphSize(); j++) {
                                for (int k = 0; k < tile_graph.getGraph()[i][j].getSources().size(); k++) {
                                    Tile<Integer> temp = tile_graph.getGraph()[i][j];
                                    if (temp.getSources().get(k).getKey() == num) {
                                        System.out.println("hello drawing");

                                    }
                                }
                            }
                        }

                    }
                });
                sinks_a[i][j] = new JLabel("", CENTER);
                sinks_a[i][j].setText(Integer.toString(tile.getSinks().get(0).getKey()));
                sinks_a[i][j].setBackground(Color.green);
                sinks_a[i][j].setOpaque(true);
                sinks_a[i][j].setLocation(x_pos + 1, y_pos + drawBorder / tile_graph.getGraphSize() / 2 - drawBorder / tile_graph.getGraphSize() /8);
                tile.getSinks().get(0).pos_x_e = x_pos;
                tile.getSinks().get(0).pos_y_e = y_pos + drawBorder / tile_graph.getGraphSize() / 2;
                sinks_a[i][j].setSize(drawBorder/ tile_graph.getGraphSize() /8, drawBorder / tile_graph.getGraphSize() /8);
                int gap_x = 0;
                int gap_y = 0;
                for (int m = 0; m < tile.getWires().size(); m++) {
                    wires_a[i * tile_graph.getGraphSize() + j][m] = new JLabel("", CENTER);
                    wires_a[i * tile_graph.getGraphSize() + j][m].setText(Integer.toString(tile.getWires().get(m).getKey()));
                    int rc = (int)tile.getWires().get(m).getCost();
                    int gc = (int)tile.getWires().get(m).getCost()*10;
                    int bc = 255-(int)tile.getWires().get(m).getCost();
                    if (rc > 255) rc = 255;
                    if (gc > 255) gc = 255;
                    if (bc < 0)     bc = 0;
                    wires_a[i * tile_graph.getGraphSize() + j][m].setBackground(new Color(rc,gc,bc));
                    wires_a[i * tile_graph.getGraphSize() + j][m].setOpaque(true);
                    wires_a[i * tile_graph.getGraphSize() + j][m].addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            JLabel l = (JLabel) e.getSource();
                            String state = "";
                            state = "wire";
                            int num = Integer.parseInt(l.getText());
                            int key = 0;
                            for (int i = 0; i < tile_graph.getWireList().size(); i++) {
                                if (tile_graph.getWireList().get(i).getKey() == num) {
                                    key = i;
                                }
                            }
                            double history_get = tile_graph.getWireList().get(key).getHistory();
                            int history = 0;
                            if (history_get != 0) {
                                history = (int) (Math.log(tile_graph.getWireList().get(key).getHistory()) / Math.log(1.1));
                            }
                            DecimalFormat numformat = new DecimalFormat("#.00");
                            showInfo.setText(state + " " + num + "\n" + "congestion history" + history + "\n" + "congestion" + tile_graph.getWireList().get(key).getOther() + "\n" + "cost" +numformat.format(tile_graph.getWireList().get(key).getCost())  + "");
                        }
                    });
                    if (tile.getWires().get(m).dir == 0) {
                        wires_a[i * tile_graph.getGraphSize() + j][m].setLocation(x_pos + gap_x + drawBorder / tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16, y_pos);
                        wires_a[i * tile_graph.getGraphSize() + j][m].setSize(drawBorder / tile_graph.getGraphSize() / 8/(tile_graph.getWireSize()-1), drawBorder / tile_graph.getGraphSize() / 2);
                        tile.getWires().get(m).pos_x_s = x_pos + gap_x + drawBorder / tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16;
                        tile.getWires().get(m).pos_y_s = y_pos;
                        tile.getWires().get(m).pos_x_e = x_pos + gap_x + drawBorder / tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16;
                        tile.getWires().get(m).pos_y_e = y_pos + drawBorder / tile_graph.getGraphSize() / 2;
                        gap_x = gap_x + drawBorder / tile_graph.getGraphSize() / 4/(tile_graph.getWireSize()-1);
                    } else {
                        wires_a[i * tile_graph.getGraphSize() + j][m].setLocation(x_pos, y_pos + gap_y + drawBorder / tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16);
                        wires_a[i * tile_graph.getGraphSize() + j][m].setSize(drawBorder / tile_graph.getGraphSize() / 2, drawBorder / tile_graph.getGraphSize() / 8/(tile_graph.getWireSize()-1));
                        tile.getWires().get(m).pos_x_s = x_pos;
                        tile.getWires().get(m).pos_y_s = y_pos + gap_y + drawBorder / tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16;
                        tile.getWires().get(m).pos_x_e = x_pos + drawBorder / tile_graph.getGraphSize() / 2;
                        tile.getWires().get(m).pos_y_e = y_pos + gap_y + drawBorder /tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16;
                        gap_y = gap_y + drawBorder / tile_graph.getGraphSize() / 4/(tile_graph.getWireSize()-1);
                    }
                }
            }
        }
    }
 
 public void setUp_b() {
        for (int i = 0; i < tile_graph.getGraphSize(); i++) {
            for (int j = 0; j < tile_graph.getGraphSize(); j++) {       
                Tile<Integer> tile = tile_graph.getGraph()[i][j];
                int x_pos =  i * drawBorder / tile_graph.getGraphSize();
                int y_pos =  j * drawBorder / tile_graph.getGraphSize();
                sources_a[i][j] = new JLabel("", CENTER);
                sources_a[i][j].setText(Integer.toString(tile.getSources().get(0).getKey()));
                sources_a[i][j].setBackground(Color.green);
                sources_a[i][j].setOpaque(true);
                sources_a[i][j].setLocation( drawBorder / tile_graph.getGraphSize() / 2 - drawBorder / tile_graph.getGraphSize()/8,  1);
                tile.getSources().get(0).pos_x_e = x_pos + drawBorder / tile_graph.getGraphSize() / 2;
                tile.getSources().get(0).pos_y_e = y_pos + 1;
                sources_a[i][j].setSize(drawBorder / tile_graph.getGraphSize() /8, drawBorder / tile_graph.getGraphSize()/8);
                sources_a[i][j].addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        JLabel l = (JLabel) e.getSource();
                        showInfo.setText("");
                        String state = "";
                        int num = Integer.parseInt(l.getText());
                        state = "source";
                        String path = "path from";
                        String cost = "cost ";
                        int key = 0;
                        for (int i = 0; i < tile_graph.getSourceList().size(); i++) {
                            if (tile_graph.getSourceList().get(i).getKey() == num) {
                                key = i;
                            }
                        }
                        for (int i = 0; i < tile_graph.getSourceList().get(key).paths.size(); i++) {
                            path = "path from";
                            cost = "cost";
                            for (int m = 0; m < tile_graph.getSourceList().get(key).paths.get(i).size(); m++) {
                                path = path + " " + tile_graph.getSourceList().get(key).paths.get(i).get(m).getKey();
                            }
                            DecimalFormat numformat = new DecimalFormat("#.00");
                            cost = cost + numformat.format(tile_graph.getSourceList().get(key).distance.get(i));
                            showInfo.append(state + "\n" + path + "\n" + cost + "!" + "\n");
                        }

                        for (int i = 0; i < tile_graph.getGraphSize(); i++) {
                            for (int j = 0; j < tile_graph.getGraphSize(); j++) {
                                for (int k = 0; k < tile_graph.getGraph()[i][j].getSources().size(); k++) {
                                    Tile<Integer> temp = tile_graph.getGraph()[i][j];
                                    if (temp.getSources().get(k).getKey() == num) {
                                        System.out.println("hello drawing");

                                    }
                                }
                            }
                        }

                    }
                });
                sinks_a[i][j] = new JLabel("", CENTER);
                sinks_a[i][j].setText(Integer.toString(tile.getSinks().get(0).getKey()));
                sinks_a[i][j].setBackground(Color.green);
                sinks_a[i][j].setOpaque(true);
                sinks_a[i][j].setLocation( 1,  drawBorder / tile_graph.getGraphSize() / 2 - drawBorder / tile_graph.getGraphSize() /8);
                tile.getSinks().get(0).pos_x_e = x_pos;
                tile.getSinks().get(0).pos_y_e = y_pos + drawBorder / tile_graph.getGraphSize() / 2;
                sinks_a[i][j].setSize(drawBorder/ tile_graph.getGraphSize() /8, drawBorder / tile_graph.getGraphSize() /8);
                int gap_x = 0;
                int gap_y = 0;
                for (int m = 0; m < tile.getWires().size(); m++) {
                    wires_a[i * tile_graph.getGraphSize() + j][m] = new JLabel("", CENTER);
                    wires_a[i * tile_graph.getGraphSize() + j][m].setText(Integer.toString(tile.getWires().get(m).getKey()));
                    int rc = (int)tile.getWires().get(m).getCost();
                    int gc = (int)tile.getWires().get(m).getCost()*10;
                    int bc = 255-(int)tile.getWires().get(m).getCost();
                    if (rc > 255) rc = 255;
                    if (gc > 255) gc = 255;
                    if (bc < 0)     bc = 0;
                    wires_a[i * tile_graph.getGraphSize() + j][m].setBackground(new Color(rc,gc,bc));
                    wires_a[i * tile_graph.getGraphSize() + j][m].setOpaque(true);
                    wires_a[i * tile_graph.getGraphSize() + j][m].addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            JLabel l = (JLabel) e.getSource();
                            String state = "";
                            state = "wire";
                            int num = Integer.parseInt(l.getText());
                            int key = 0;
                            for (int i = 0; i < tile_graph.getWireList().size(); i++) {
                                if (tile_graph.getWireList().get(i).getKey() == num) {
                                    key = i;
                                }
                            }
                            double history_get = tile_graph.getWireList().get(key).getHistory();
                            int history = 0;
                            if (history_get != 0) {
                                history = (int) (Math.log(tile_graph.getWireList().get(key).getHistory()) / Math.log(1.1));
                            }
                            DecimalFormat numformat = new DecimalFormat("#.00");
                            showInfo.setText(state + " " + num + "\n" + "congestion history" + history + "\n" + "congestion" + tile_graph.getWireList().get(key).getOther() + "\n" + "cost" +numformat.format(tile_graph.getWireList().get(key).getCost())  + "");
                        }
                    });
                    if (tile.getWires().get(m).dir == 0) {
                        wires_a[i * tile_graph.getGraphSize() + j][m].setLocation( gap_x + drawBorder / tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16, 0);
                        wires_a[i * tile_graph.getGraphSize() + j][m].setSize(drawBorder / tile_graph.getGraphSize() / 8/(tile_graph.getWireSize()-1), drawBorder / tile_graph.getGraphSize() / 2);
                        tile.getWires().get(m).pos_x_s = x_pos + gap_x + drawBorder / tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16;
                        tile.getWires().get(m).pos_y_s = y_pos;
                        tile.getWires().get(m).pos_x_e = x_pos + gap_x + drawBorder / tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16;
                        tile.getWires().get(m).pos_y_e = y_pos + drawBorder / tile_graph.getGraphSize() / 2;
                        gap_x = gap_x + drawBorder / tile_graph.getGraphSize() / 4/(tile_graph.getWireSize()-1);
                    } else {
                        wires_a[i * tile_graph.getGraphSize() + j][m].setLocation(0,  gap_y + drawBorder / tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16);
                        wires_a[i * tile_graph.getGraphSize() + j][m].setSize(drawBorder / tile_graph.getGraphSize() / 2, drawBorder / tile_graph.getGraphSize() / 8/(tile_graph.getWireSize()-1));
                        tile.getWires().get(m).pos_x_s = x_pos;
                        tile.getWires().get(m).pos_y_s = y_pos + gap_y + drawBorder / tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16;
                        tile.getWires().get(m).pos_x_e = x_pos + drawBorder / tile_graph.getGraphSize() / 2;
                        tile.getWires().get(m).pos_y_e = y_pos + gap_y + drawBorder /tile_graph.getGraphSize() / 2 + drawBorder / tile_graph.getGraphSize() / 16;
                        gap_y = gap_y + drawBorder / tile_graph.getGraphSize() / 4/(tile_graph.getWireSize()-1);
                    }
                }
            }
        }
    }
    
 public boolean showCong() {
        if (!tile_graph.testCong()) {
            iter++;
            showState.setText("STILL CONGESTED");
            return false;
        } else {
            showState.setText("This circuit has no congestion");
            showInfo.append("iteration number: " + iter);
            iter = 0;
            return true;
        }
    }
    
 public void showNode(){
        showInfo.setText("");
        for(int i = 0; i < tile_graph.getGraphSize(); i++){
            for(int j = 0; j < tile_graph.getGraphSize(); j++){
                Tile<Integer> temp = tile_graph.getGraph()[i][j];
                for(int k = 0; k < temp.getWires().size();k++){
                    if(temp.getWires().get(k).getOther() > 2){
                        DecimalFormat numformat = new DecimalFormat("#.00");
                        showInfo.append("show node: " +temp.getWires().get(k).getKey() + "\n" +"show cost: " + numformat.format(temp.getWires().get(k).getCost()) +"\n"+ "congestion" + temp.getWires().get(k).getOther()+"\n");
                    }
                }
            }
        }
    }


    TiledGraph tile_graph;
    private JLabel sources_a[][];
    private JLabel sinks_a[][];
    private JLabel wires_a[][];
    private int iter;
    private boolean restart = false;
    private final int drawBorder = 640;
    private DrawTile showPanel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JDialog dialog;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenuItem info;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea manual;
    private javax.swing.JScrollPane manualPane;
    private javax.swing.JMenu menu;
    private javax.swing.JTextField num_field;
    private javax.swing.JButton reroute;
    private javax.swing.JButton route;
    private javax.swing.JButton show;
    private javax.swing.JTextArea showDest;
    private javax.swing.JTextArea showInfo;
    private javax.swing.JScrollPane showPane;
    private javax.swing.JTextArea showSrc;
    private javax.swing.JLabel showState;
    private javax.swing.JButton stopr;
    private javax.swing.JToggleButton zoom;
    private javax.swing.JButton zoom_in;
    private javax.swing.JButton zoom_out;
    // End of variables declaration//GEN-END:variables
}
